package annotations.computed

/**
 * Annotation to define a computed column in a database table.
 * The `compute` parameter allows specifying a JavaScript expression to compute the value of the column.
 * This expression can reference and transform values of other columns using JavaScript code.
 * The `readOnly` parameter indicates whether the column is read-only and cannot be manually updated.
 *
 * Example usage:
 * ```
 * val name = varchar("name", 150)
 *
 * @Computed(
 *     compute = "{name}.toLowerCase().replaceAll(' ', '-')",
 *     readOnly = true
 * )
 * val slug = varchar("slug", 500)
 * ```
 * In this example, the `slug` column is automatically generated by converting the `name` column to lowercase
 * and replacing spaces with dashes, using a JavaScript expression.
 * The `slug` column is read-only, meaning it cannot be manually updated.
 */
@Retention(AnnotationRetention.SOURCE)
@Target(AnnotationTarget.PROPERTY)
annotation class Computed(
    val compute: String,
    val readOnly: Boolean = true
)